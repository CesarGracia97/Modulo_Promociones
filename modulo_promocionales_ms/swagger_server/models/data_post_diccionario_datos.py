# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.all_of_data_post_diccionario_datos_upgrade import AllOfDataPostDiccionarioDatosUpgrade  # noqa: F401,E501
from swagger_server.models.one_of_data_post_diccionario_datos_sectores import OneOfDataPostDiccionarioDatosSectores  # noqa: F401,E501
from swagger_server.models.all_of_data_post_diccionario_datos_streaming import AllOfDataPostDiccionarioDatosStreaming  # noqa: F401,E501
from swagger_server.models.all_of_data_post_diccionario_datos_telefonia import AllOfDataPostDiccionarioDatosTelefonia  # noqa: F401,E501
from swagger_server.models.all_of_data_post_diccionario_datos_television import AllOfDataPostDiccionarioDatosTelevision  # noqa: F401,E501
from swagger_server.models.all_of_data_post_diccionario_datos_router import AllOfDataPostDiccionarioDatosRouter  # noqa: F401,E501
from swagger_server import util


class DataPostDiccionarioDatos(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id_registro: int=None, nombre_promocion: str=None, fecha_inicio_promocion: date=None, fecha_finalizacion_promocion: date=None, servicio: str=None, plan_id: int=None, variant_id: int=None, producto_id: int=None, dias_gozados: str=None, canal: int=None, precio_promocional: float=None, precio_referencial: float=None, mes_inicio_promocion: int=None, mes_fin_promocion: str=None, upgrade: AllOfDataPostDiccionarioDatosUpgrade=None, ciudades: List[int]=None, sectores: OneOfDataPostDiccionarioDatosSectores=None, buro: List[int]=None, formas_de_pago: List[int]=None, fecha_generacion_registro: datetime=None, streaming: AllOfDataPostDiccionarioDatosStreaming=None, telefonia: AllOfDataPostDiccionarioDatosTelefonia=None, television: AllOfDataPostDiccionarioDatosTelevision=None, router: AllOfDataPostDiccionarioDatosRouter=None):  # noqa: E501
        """DataPostDiccionarioDatos - a model defined in Swagger

        :param id_registro: The id_registro of this DataPostDiccionarioDatos.  # noqa: E501
        :type id_registro: int
        :param nombre_promocion: The nombre_promocion of this DataPostDiccionarioDatos.  # noqa: E501
        :type nombre_promocion: str
        :param fecha_inicio_promocion: The fecha_inicio_promocion of this DataPostDiccionarioDatos.  # noqa: E501
        :type fecha_inicio_promocion: date
        :param fecha_finalizacion_promocion: The fecha_finalizacion_promocion of this DataPostDiccionarioDatos.  # noqa: E501
        :type fecha_finalizacion_promocion: date
        :param servicio: The servicio of this DataPostDiccionarioDatos.  # noqa: E501
        :type servicio: str
        :param plan_id: The plan_id of this DataPostDiccionarioDatos.  # noqa: E501
        :type plan_id: int
        :param variant_id: The variant_id of this DataPostDiccionarioDatos.  # noqa: E501
        :type variant_id: int
        :param producto_id: The producto_id of this DataPostDiccionarioDatos.  # noqa: E501
        :type producto_id: int
        :param dias_gozados: The dias_gozados of this DataPostDiccionarioDatos.  # noqa: E501
        :type dias_gozados: str
        :param canal: The canal of this DataPostDiccionarioDatos.  # noqa: E501
        :type canal: int
        :param precio_promocional: The precio_promocional of this DataPostDiccionarioDatos.  # noqa: E501
        :type precio_promocional: float
        :param precio_referencial: The precio_referencial of this DataPostDiccionarioDatos.  # noqa: E501
        :type precio_referencial: float
        :param mes_inicio_promocion: The mes_inicio_promocion of this DataPostDiccionarioDatos.  # noqa: E501
        :type mes_inicio_promocion: int
        :param mes_fin_promocion: The mes_fin_promocion of this DataPostDiccionarioDatos.  # noqa: E501
        :type mes_fin_promocion: str
        :param upgrade: The upgrade of this DataPostDiccionarioDatos.  # noqa: E501
        :type upgrade: AllOfDataPostDiccionarioDatosUpgrade
        :param ciudades: The ciudades of this DataPostDiccionarioDatos.  # noqa: E501
        :type ciudades: List[int]
        :param sectores: The sectores of this DataPostDiccionarioDatos.  # noqa: E501
        :type sectores: OneOfDataPostDiccionarioDatosSectores
        :param buro: The buro of this DataPostDiccionarioDatos.  # noqa: E501
        :type buro: List[int]
        :param formas_de_pago: The formas_de_pago of this DataPostDiccionarioDatos.  # noqa: E501
        :type formas_de_pago: List[int]
        :param fecha_generacion_registro: The fecha_generacion_registro of this DataPostDiccionarioDatos.  # noqa: E501
        :type fecha_generacion_registro: datetime
        :param streaming: The streaming of this DataPostDiccionarioDatos.  # noqa: E501
        :type streaming: AllOfDataPostDiccionarioDatosStreaming
        :param telefonia: The telefonia of this DataPostDiccionarioDatos.  # noqa: E501
        :type telefonia: AllOfDataPostDiccionarioDatosTelefonia
        :param television: The television of this DataPostDiccionarioDatos.  # noqa: E501
        :type television: AllOfDataPostDiccionarioDatosTelevision
        :param router: The router of this DataPostDiccionarioDatos.  # noqa: E501
        :type router: AllOfDataPostDiccionarioDatosRouter
        """
        self.swagger_types = {
            'id_registro': int,
            'nombre_promocion': str,
            'fecha_inicio_promocion': date,
            'fecha_finalizacion_promocion': date,
            'servicio': str,
            'plan_id': int,
            'variant_id': int,
            'producto_id': int,
            'dias_gozados': str,
            'canal': int,
            'precio_promocional': float,
            'precio_referencial': float,
            'mes_inicio_promocion': int,
            'mes_fin_promocion': str,
            'upgrade': AllOfDataPostDiccionarioDatosUpgrade,
            'ciudades': List[int],
            'sectores': OneOfDataPostDiccionarioDatosSectores,
            'buro': List[int],
            'formas_de_pago': List[int],
            'fecha_generacion_registro': datetime,
            'streaming': AllOfDataPostDiccionarioDatosStreaming,
            'telefonia': AllOfDataPostDiccionarioDatosTelefonia,
            'television': AllOfDataPostDiccionarioDatosTelevision,
            'router': AllOfDataPostDiccionarioDatosRouter
        }

        self.attribute_map = {
            'id_registro': 'Id Registro',
            'nombre_promocion': 'Nombre Promocion',
            'fecha_inicio_promocion': 'Fecha Inicio Promocion',
            'fecha_finalizacion_promocion': 'Fecha Finalizacion Promocion',
            'servicio': 'Servicio',
            'plan_id': 'Plan_Id',
            'variant_id': 'Variant_Id',
            'producto_id': 'Producto_Id',
            'dias_gozados': 'Dias Gozados',
            'canal': 'Canal',
            'precio_promocional': 'Precio Promocional',
            'precio_referencial': 'Precio Referencial',
            'mes_inicio_promocion': 'Mes Inicio Promocion',
            'mes_fin_promocion': 'Mes Fin Promocion',
            'upgrade': 'UPGRADE',
            'ciudades': 'Ciudades',
            'sectores': 'Sectores',
            'buro': 'Buro',
            'formas_de_pago': 'Formas de Pago',
            'fecha_generacion_registro': 'Fecha Generacion Registro',
            'streaming': 'STREAMING',
            'telefonia': 'TELEFONIA',
            'television': 'TELEVISION',
            'router': 'ROUTER'
        }
        self._id_registro = id_registro
        self._nombre_promocion = nombre_promocion
        self._fecha_inicio_promocion = fecha_inicio_promocion
        self._fecha_finalizacion_promocion = fecha_finalizacion_promocion
        self._servicio = servicio
        self._plan_id = plan_id
        self._variant_id = variant_id
        self._producto_id = producto_id
        self._dias_gozados = dias_gozados
        self._canal = canal
        self._precio_promocional = precio_promocional
        self._precio_referencial = precio_referencial
        self._mes_inicio_promocion = mes_inicio_promocion
        self._mes_fin_promocion = mes_fin_promocion
        self._upgrade = upgrade
        self._ciudades = ciudades
        self._sectores = sectores
        self._buro = buro
        self._formas_de_pago = formas_de_pago
        self._fecha_generacion_registro = fecha_generacion_registro
        self._streaming = streaming
        self._telefonia = telefonia
        self._television = television
        self._router = router

    @classmethod
    def from_dict(cls, dikt) -> 'DataPostDiccionarioDatos':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataPostDiccionarioDatos of this DataPostDiccionarioDatos.  # noqa: E501
        :rtype: DataPostDiccionarioDatos
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_registro(self) -> int:
        """Gets the id_registro of this DataPostDiccionarioDatos.


        :return: The id_registro of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._id_registro

    @id_registro.setter
    def id_registro(self, id_registro: int):
        """Sets the id_registro of this DataPostDiccionarioDatos.


        :param id_registro: The id_registro of this DataPostDiccionarioDatos.
        :type id_registro: int
        """
        if id_registro is None:
            raise ValueError("Invalid value for `id_registro`, must not be `None`")  # noqa: E501

        self._id_registro = id_registro

    @property
    def nombre_promocion(self) -> str:
        """Gets the nombre_promocion of this DataPostDiccionarioDatos.


        :return: The nombre_promocion of this DataPostDiccionarioDatos.
        :rtype: str
        """
        return self._nombre_promocion

    @nombre_promocion.setter
    def nombre_promocion(self, nombre_promocion: str):
        """Sets the nombre_promocion of this DataPostDiccionarioDatos.


        :param nombre_promocion: The nombre_promocion of this DataPostDiccionarioDatos.
        :type nombre_promocion: str
        """
        if nombre_promocion is None:
            raise ValueError("Invalid value for `nombre_promocion`, must not be `None`")  # noqa: E501

        self._nombre_promocion = nombre_promocion

    @property
    def fecha_inicio_promocion(self) -> date:
        """Gets the fecha_inicio_promocion of this DataPostDiccionarioDatos.


        :return: The fecha_inicio_promocion of this DataPostDiccionarioDatos.
        :rtype: date
        """
        return self._fecha_inicio_promocion

    @fecha_inicio_promocion.setter
    def fecha_inicio_promocion(self, fecha_inicio_promocion: date):
        """Sets the fecha_inicio_promocion of this DataPostDiccionarioDatos.


        :param fecha_inicio_promocion: The fecha_inicio_promocion of this DataPostDiccionarioDatos.
        :type fecha_inicio_promocion: date
        """
        if fecha_inicio_promocion is None:
            raise ValueError("Invalid value for `fecha_inicio_promocion`, must not be `None`")  # noqa: E501

        self._fecha_inicio_promocion = fecha_inicio_promocion

    @property
    def fecha_finalizacion_promocion(self) -> date:
        """Gets the fecha_finalizacion_promocion of this DataPostDiccionarioDatos.


        :return: The fecha_finalizacion_promocion of this DataPostDiccionarioDatos.
        :rtype: date
        """
        return self._fecha_finalizacion_promocion

    @fecha_finalizacion_promocion.setter
    def fecha_finalizacion_promocion(self, fecha_finalizacion_promocion: date):
        """Sets the fecha_finalizacion_promocion of this DataPostDiccionarioDatos.


        :param fecha_finalizacion_promocion: The fecha_finalizacion_promocion of this DataPostDiccionarioDatos.
        :type fecha_finalizacion_promocion: date
        """
        if fecha_finalizacion_promocion is None:
            raise ValueError("Invalid value for `fecha_finalizacion_promocion`, must not be `None`")  # noqa: E501

        self._fecha_finalizacion_promocion = fecha_finalizacion_promocion

    @property
    def servicio(self) -> str:
        """Gets the servicio of this DataPostDiccionarioDatos.


        :return: The servicio of this DataPostDiccionarioDatos.
        :rtype: str
        """
        return self._servicio

    @servicio.setter
    def servicio(self, servicio: str):
        """Sets the servicio of this DataPostDiccionarioDatos.


        :param servicio: The servicio of this DataPostDiccionarioDatos.
        :type servicio: str
        """
        if servicio is None:
            raise ValueError("Invalid value for `servicio`, must not be `None`")  # noqa: E501

        self._servicio = servicio

    @property
    def plan_id(self) -> int:
        """Gets the plan_id of this DataPostDiccionarioDatos.


        :return: The plan_id of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id: int):
        """Sets the plan_id of this DataPostDiccionarioDatos.


        :param plan_id: The plan_id of this DataPostDiccionarioDatos.
        :type plan_id: int
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")  # noqa: E501

        self._plan_id = plan_id

    @property
    def variant_id(self) -> int:
        """Gets the variant_id of this DataPostDiccionarioDatos.


        :return: The variant_id of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._variant_id

    @variant_id.setter
    def variant_id(self, variant_id: int):
        """Sets the variant_id of this DataPostDiccionarioDatos.


        :param variant_id: The variant_id of this DataPostDiccionarioDatos.
        :type variant_id: int
        """
        if variant_id is None:
            raise ValueError("Invalid value for `variant_id`, must not be `None`")  # noqa: E501

        self._variant_id = variant_id

    @property
    def producto_id(self) -> int:
        """Gets the producto_id of this DataPostDiccionarioDatos.


        :return: The producto_id of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._producto_id

    @producto_id.setter
    def producto_id(self, producto_id: int):
        """Sets the producto_id of this DataPostDiccionarioDatos.


        :param producto_id: The producto_id of this DataPostDiccionarioDatos.
        :type producto_id: int
        """
        if producto_id is None:
            raise ValueError("Invalid value for `producto_id`, must not be `None`")  # noqa: E501

        self._producto_id = producto_id

    @property
    def dias_gozados(self) -> str:
        """Gets the dias_gozados of this DataPostDiccionarioDatos.


        :return: The dias_gozados of this DataPostDiccionarioDatos.
        :rtype: str
        """
        return self._dias_gozados

    @dias_gozados.setter
    def dias_gozados(self, dias_gozados: str):
        """Sets the dias_gozados of this DataPostDiccionarioDatos.


        :param dias_gozados: The dias_gozados of this DataPostDiccionarioDatos.
        :type dias_gozados: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if dias_gozados not in allowed_values:
            raise ValueError(
                "Invalid value for `dias_gozados` ({0}), must be one of {1}"
                .format(dias_gozados, allowed_values)
            )

        self._dias_gozados = dias_gozados

    @property
    def canal(self) -> int:
        """Gets the canal of this DataPostDiccionarioDatos.


        :return: The canal of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._canal

    @canal.setter
    def canal(self, canal: int):
        """Sets the canal of this DataPostDiccionarioDatos.


        :param canal: The canal of this DataPostDiccionarioDatos.
        :type canal: int
        """
        if canal is None:
            raise ValueError("Invalid value for `canal`, must not be `None`")  # noqa: E501

        self._canal = canal

    @property
    def precio_promocional(self) -> float:
        """Gets the precio_promocional of this DataPostDiccionarioDatos.


        :return: The precio_promocional of this DataPostDiccionarioDatos.
        :rtype: float
        """
        return self._precio_promocional

    @precio_promocional.setter
    def precio_promocional(self, precio_promocional: float):
        """Sets the precio_promocional of this DataPostDiccionarioDatos.


        :param precio_promocional: The precio_promocional of this DataPostDiccionarioDatos.
        :type precio_promocional: float
        """
        if precio_promocional is None:
            raise ValueError("Invalid value for `precio_promocional`, must not be `None`")  # noqa: E501

        self._precio_promocional = precio_promocional

    @property
    def precio_referencial(self) -> float:
        """Gets the precio_referencial of this DataPostDiccionarioDatos.


        :return: The precio_referencial of this DataPostDiccionarioDatos.
        :rtype: float
        """
        return self._precio_referencial

    @precio_referencial.setter
    def precio_referencial(self, precio_referencial: float):
        """Sets the precio_referencial of this DataPostDiccionarioDatos.


        :param precio_referencial: The precio_referencial of this DataPostDiccionarioDatos.
        :type precio_referencial: float
        """
        if precio_referencial is None:
            raise ValueError("Invalid value for `precio_referencial`, must not be `None`")  # noqa: E501

        self._precio_referencial = precio_referencial

    @property
    def mes_inicio_promocion(self) -> int:
        """Gets the mes_inicio_promocion of this DataPostDiccionarioDatos.


        :return: The mes_inicio_promocion of this DataPostDiccionarioDatos.
        :rtype: int
        """
        return self._mes_inicio_promocion

    @mes_inicio_promocion.setter
    def mes_inicio_promocion(self, mes_inicio_promocion: int):
        """Sets the mes_inicio_promocion of this DataPostDiccionarioDatos.


        :param mes_inicio_promocion: The mes_inicio_promocion of this DataPostDiccionarioDatos.
        :type mes_inicio_promocion: int
        """
        if mes_inicio_promocion is None:
            raise ValueError("Invalid value for `mes_inicio_promocion`, must not be `None`")  # noqa: E501

        self._mes_inicio_promocion = mes_inicio_promocion

    @property
    def mes_fin_promocion(self) -> str:
        """Gets the mes_fin_promocion of this DataPostDiccionarioDatos.


        :return: The mes_fin_promocion of this DataPostDiccionarioDatos.
        :rtype: str
        """
        return self._mes_fin_promocion

    @mes_fin_promocion.setter
    def mes_fin_promocion(self, mes_fin_promocion: str):
        """Sets the mes_fin_promocion of this DataPostDiccionarioDatos.


        :param mes_fin_promocion: The mes_fin_promocion of this DataPostDiccionarioDatos.
        :type mes_fin_promocion: str
        """
        if mes_fin_promocion is None:
            raise ValueError("Invalid value for `mes_fin_promocion`, must not be `None`")  # noqa: E501

        self._mes_fin_promocion = mes_fin_promocion

    @property
    def upgrade(self) -> AllOfDataPostDiccionarioDatosUpgrade:
        """Gets the upgrade of this DataPostDiccionarioDatos.


        :return: The upgrade of this DataPostDiccionarioDatos.
        :rtype: AllOfDataPostDiccionarioDatosUpgrade
        """
        return self._upgrade

    @upgrade.setter
    def upgrade(self, upgrade: AllOfDataPostDiccionarioDatosUpgrade):
        """Sets the upgrade of this DataPostDiccionarioDatos.


        :param upgrade: The upgrade of this DataPostDiccionarioDatos.
        :type upgrade: AllOfDataPostDiccionarioDatosUpgrade
        """

        self._upgrade = upgrade

    @property
    def ciudades(self) -> List[int]:
        """Gets the ciudades of this DataPostDiccionarioDatos.


        :return: The ciudades of this DataPostDiccionarioDatos.
        :rtype: List[int]
        """
        return self._ciudades

    @ciudades.setter
    def ciudades(self, ciudades: List[int]):
        """Sets the ciudades of this DataPostDiccionarioDatos.


        :param ciudades: The ciudades of this DataPostDiccionarioDatos.
        :type ciudades: List[int]
        """
        if ciudades is None:
            raise ValueError("Invalid value for `ciudades`, must not be `None`")  # noqa: E501

        self._ciudades = ciudades

    @property
    def sectores(self) -> OneOfDataPostDiccionarioDatosSectores:
        """Gets the sectores of this DataPostDiccionarioDatos.


        :return: The sectores of this DataPostDiccionarioDatos.
        :rtype: OneOfDataPostDiccionarioDatosSectores
        """
        return self._sectores

    @sectores.setter
    def sectores(self, sectores: OneOfDataPostDiccionarioDatosSectores):
        """Sets the sectores of this DataPostDiccionarioDatos.


        :param sectores: The sectores of this DataPostDiccionarioDatos.
        :type sectores: OneOfDataPostDiccionarioDatosSectores
        """
        if sectores is None:
            raise ValueError("Invalid value for `sectores`, must not be `None`")  # noqa: E501

        self._sectores = sectores

    @property
    def buro(self) -> List[int]:
        """Gets the buro of this DataPostDiccionarioDatos.


        :return: The buro of this DataPostDiccionarioDatos.
        :rtype: List[int]
        """
        return self._buro

    @buro.setter
    def buro(self, buro: List[int]):
        """Sets the buro of this DataPostDiccionarioDatos.


        :param buro: The buro of this DataPostDiccionarioDatos.
        :type buro: List[int]
        """
        if buro is None:
            raise ValueError("Invalid value for `buro`, must not be `None`")  # noqa: E501

        self._buro = buro

    @property
    def formas_de_pago(self) -> List[int]:
        """Gets the formas_de_pago of this DataPostDiccionarioDatos.


        :return: The formas_de_pago of this DataPostDiccionarioDatos.
        :rtype: List[int]
        """
        return self._formas_de_pago

    @formas_de_pago.setter
    def formas_de_pago(self, formas_de_pago: List[int]):
        """Sets the formas_de_pago of this DataPostDiccionarioDatos.


        :param formas_de_pago: The formas_de_pago of this DataPostDiccionarioDatos.
        :type formas_de_pago: List[int]
        """
        if formas_de_pago is None:
            raise ValueError("Invalid value for `formas_de_pago`, must not be `None`")  # noqa: E501

        self._formas_de_pago = formas_de_pago

    @property
    def fecha_generacion_registro(self) -> datetime:
        """Gets the fecha_generacion_registro of this DataPostDiccionarioDatos.


        :return: The fecha_generacion_registro of this DataPostDiccionarioDatos.
        :rtype: datetime
        """
        return self._fecha_generacion_registro

    @fecha_generacion_registro.setter
    def fecha_generacion_registro(self, fecha_generacion_registro: datetime):
        """Sets the fecha_generacion_registro of this DataPostDiccionarioDatos.


        :param fecha_generacion_registro: The fecha_generacion_registro of this DataPostDiccionarioDatos.
        :type fecha_generacion_registro: datetime
        """
        if fecha_generacion_registro is None:
            raise ValueError("Invalid value for `fecha_generacion_registro`, must not be `None`")  # noqa: E501

        self._fecha_generacion_registro = fecha_generacion_registro

    @property
    def streaming(self) -> AllOfDataPostDiccionarioDatosStreaming:
        """Gets the streaming of this DataPostDiccionarioDatos.


        :return: The streaming of this DataPostDiccionarioDatos.
        :rtype: AllOfDataPostDiccionarioDatosStreaming
        """
        return self._streaming

    @streaming.setter
    def streaming(self, streaming: AllOfDataPostDiccionarioDatosStreaming):
        """Sets the streaming of this DataPostDiccionarioDatos.


        :param streaming: The streaming of this DataPostDiccionarioDatos.
        :type streaming: AllOfDataPostDiccionarioDatosStreaming
        """

        self._streaming = streaming

    @property
    def telefonia(self) -> AllOfDataPostDiccionarioDatosTelefonia:
        """Gets the telefonia of this DataPostDiccionarioDatos.


        :return: The telefonia of this DataPostDiccionarioDatos.
        :rtype: AllOfDataPostDiccionarioDatosTelefonia
        """
        return self._telefonia

    @telefonia.setter
    def telefonia(self, telefonia: AllOfDataPostDiccionarioDatosTelefonia):
        """Sets the telefonia of this DataPostDiccionarioDatos.


        :param telefonia: The telefonia of this DataPostDiccionarioDatos.
        :type telefonia: AllOfDataPostDiccionarioDatosTelefonia
        """

        self._telefonia = telefonia

    @property
    def television(self) -> AllOfDataPostDiccionarioDatosTelevision:
        """Gets the television of this DataPostDiccionarioDatos.


        :return: The television of this DataPostDiccionarioDatos.
        :rtype: AllOfDataPostDiccionarioDatosTelevision
        """
        return self._television

    @television.setter
    def television(self, television: AllOfDataPostDiccionarioDatosTelevision):
        """Sets the television of this DataPostDiccionarioDatos.


        :param television: The television of this DataPostDiccionarioDatos.
        :type television: AllOfDataPostDiccionarioDatosTelevision
        """

        self._television = television

    @property
    def router(self) -> AllOfDataPostDiccionarioDatosRouter:
        """Gets the router of this DataPostDiccionarioDatos.


        :return: The router of this DataPostDiccionarioDatos.
        :rtype: AllOfDataPostDiccionarioDatosRouter
        """
        return self._router

    @router.setter
    def router(self, router: AllOfDataPostDiccionarioDatosRouter):
        """Sets the router of this DataPostDiccionarioDatos.


        :param router: The router of this DataPostDiccionarioDatos.
        :type router: AllOfDataPostDiccionarioDatosRouter
        """

        self._router = router
