# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestGetServicios(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel: str=None, type: str=None, stype: str=None):  # noqa: E501
        """RequestGetServicios - a model defined in Swagger

        :param channel: The channel of this RequestGetServicios.  # noqa: E501
        :type channel: str
        :param type: The type of this RequestGetServicios.  # noqa: E501
        :type type: str
        :param stype: The stype of this RequestGetServicios.  # noqa: E501
        :type stype: str
        """
        self.swagger_types = {
            'channel': str,
            'type': str,
            'stype': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'type': 'type',
            'stype': 'stype'
        }
        self._channel = channel
        self._type = type
        self._stype = stype

    @classmethod
    def from_dict(cls, dikt) -> 'RequestGetServicios':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestGetServicios of this RequestGetServicios.  # noqa: E501
        :rtype: RequestGetServicios
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self) -> str:
        """Gets the channel of this RequestGetServicios.


        :return: The channel of this RequestGetServicios.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this RequestGetServicios.


        :param channel: The channel of this RequestGetServicios.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def type(self) -> str:
        """Gets the type of this RequestGetServicios.


        :return: The type of this RequestGetServicios.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RequestGetServicios.


        :param type: The type of this RequestGetServicios.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def stype(self) -> str:
        """Gets the stype of this RequestGetServicios.


        :return: The stype of this RequestGetServicios.
        :rtype: str
        """
        return self._stype

    @stype.setter
    def stype(self, stype: str):
        """Sets the stype of this RequestGetServicios.


        :param stype: The stype of this RequestGetServicios.
        :type stype: str
        """
        if stype is None:
            raise ValueError("Invalid value for `stype`, must not be `None`")  # noqa: E501

        self._stype = stype
