# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestGetSectores(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel: str=None, type: str=None, id_city: int=None, id_cities: List[int]=None, tariffplanvariant: int=None, productoid: int=None, external_transaction_id: str=None):  # noqa: E501
        """RequestGetSectores - a model defined in Swagger

        :param channel: The channel of this RequestGetSectores.  # noqa: E501
        :type channel: str
        :param type: The type of this RequestGetSectores.  # noqa: E501
        :type type: str
        :param id_city: The id_city of this RequestGetSectores.  # noqa: E501
        :type id_city: int
        :param id_cities: The id_cities of this RequestGetSectores.  # noqa: E501
        :type id_cities: List[int]
        :param tariffplanvariant: The tariffplanvariant of this RequestGetSectores.  # noqa: E501
        :type tariffplanvariant: int
        :param productoid: The productoid of this RequestGetSectores.  # noqa: E501
        :type productoid: int
        :param external_transaction_id: The external_transaction_id of this RequestGetSectores.  # noqa: E501
        :type external_transaction_id: str
        """
        self.swagger_types = {
            'channel': str,
            'type': str,
            'id_city': int,
            'id_cities': List[int],
            'tariffplanvariant': int,
            'productoid': int,
            'external_transaction_id': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'type': 'type',
            'id_city': 'id_City',
            'id_cities': 'id_Cities',
            'tariffplanvariant': 'TARIFFPLANVARIANT',
            'productoid': 'PRODUCTOID',
            'external_transaction_id': 'externalTransactionId'
        }
        self._channel = channel
        self._type = type
        self._id_city = id_city
        self._id_cities = id_cities
        self._tariffplanvariant = tariffplanvariant
        self._productoid = productoid
        self._external_transaction_id = external_transaction_id

    @classmethod
    def from_dict(cls, dikt) -> 'RequestGetSectores':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestGetSectores of this RequestGetSectores.  # noqa: E501
        :rtype: RequestGetSectores
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self) -> str:
        """Gets the channel of this RequestGetSectores.


        :return: The channel of this RequestGetSectores.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this RequestGetSectores.


        :param channel: The channel of this RequestGetSectores.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def type(self) -> str:
        """Gets the type of this RequestGetSectores.


        :return: The type of this RequestGetSectores.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RequestGetSectores.


        :param type: The type of this RequestGetSectores.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id_city(self) -> int:
        """Gets the id_city of this RequestGetSectores.


        :return: The id_city of this RequestGetSectores.
        :rtype: int
        """
        return self._id_city

    @id_city.setter
    def id_city(self, id_city: int):
        """Sets the id_city of this RequestGetSectores.


        :param id_city: The id_city of this RequestGetSectores.
        :type id_city: int
        """

        self._id_city = id_city

    @property
    def id_cities(self) -> List[int]:
        """Gets the id_cities of this RequestGetSectores.


        :return: The id_cities of this RequestGetSectores.
        :rtype: List[int]
        """
        return self._id_cities

    @id_cities.setter
    def id_cities(self, id_cities: List[int]):
        """Sets the id_cities of this RequestGetSectores.


        :param id_cities: The id_cities of this RequestGetSectores.
        :type id_cities: List[int]
        """

        self._id_cities = id_cities

    @property
    def tariffplanvariant(self) -> int:
        """Gets the tariffplanvariant of this RequestGetSectores.


        :return: The tariffplanvariant of this RequestGetSectores.
        :rtype: int
        """
        return self._tariffplanvariant

    @tariffplanvariant.setter
    def tariffplanvariant(self, tariffplanvariant: int):
        """Sets the tariffplanvariant of this RequestGetSectores.


        :param tariffplanvariant: The tariffplanvariant of this RequestGetSectores.
        :type tariffplanvariant: int
        """

        self._tariffplanvariant = tariffplanvariant

    @property
    def productoid(self) -> int:
        """Gets the productoid of this RequestGetSectores.


        :return: The productoid of this RequestGetSectores.
        :rtype: int
        """
        return self._productoid

    @productoid.setter
    def productoid(self, productoid: int):
        """Sets the productoid of this RequestGetSectores.


        :param productoid: The productoid of this RequestGetSectores.
        :type productoid: int
        """

        self._productoid = productoid

    @property
    def external_transaction_id(self) -> str:
        """Gets the external_transaction_id of this RequestGetSectores.


        :return: The external_transaction_id of this RequestGetSectores.
        :rtype: str
        """
        return self._external_transaction_id

    @external_transaction_id.setter
    def external_transaction_id(self, external_transaction_id: str):
        """Sets the external_transaction_id of this RequestGetSectores.


        :param external_transaction_id: The external_transaction_id of this RequestGetSectores.
        :type external_transaction_id: str
        """
        if external_transaction_id is None:
            raise ValueError("Invalid value for `external_transaction_id`, must not be `None`")  # noqa: E501

        self._external_transaction_id = external_transaction_id
