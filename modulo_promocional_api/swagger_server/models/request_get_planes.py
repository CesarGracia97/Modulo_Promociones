# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class RequestGetPlanes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, channel: str=None, type: str=None, stype: str=None, servicio: str=None, tipo_servicio: str=None, external_transaction_id: str=None):  # noqa: E501
        """RequestGetPlanes - a model defined in Swagger

        :param channel: The channel of this RequestGetPlanes.  # noqa: E501
        :type channel: str
        :param type: The type of this RequestGetPlanes.  # noqa: E501
        :type type: str
        :param stype: The stype of this RequestGetPlanes.  # noqa: E501
        :type stype: str
        :param servicio: The servicio of this RequestGetPlanes.  # noqa: E501
        :type servicio: str
        :param tipo_servicio: The tipo_servicio of this RequestGetPlanes.  # noqa: E501
        :type tipo_servicio: str
        :param external_transaction_id: The external_transaction_id of this RequestGetPlanes.  # noqa: E501
        :type external_transaction_id: str
        """
        self.swagger_types = {
            'channel': str,
            'type': str,
            'stype': str,
            'servicio': str,
            'tipo_servicio': str,
            'external_transaction_id': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'type': 'type',
            'stype': 'stype',
            'servicio': 'SERVICIO',
            'tipo_servicio': 'TIPO_SERVICIO',
            'external_transaction_id': 'externalTransactionId'
        }
        self._channel = channel
        self._type = type
        self._stype = stype
        self._servicio = servicio
        self._tipo_servicio = tipo_servicio
        self._external_transaction_id = external_transaction_id

    @classmethod
    def from_dict(cls, dikt) -> 'RequestGetPlanes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RequestGetPlanes of this RequestGetPlanes.  # noqa: E501
        :rtype: RequestGetPlanes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self) -> str:
        """Gets the channel of this RequestGetPlanes.


        :return: The channel of this RequestGetPlanes.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this RequestGetPlanes.


        :param channel: The channel of this RequestGetPlanes.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def type(self) -> str:
        """Gets the type of this RequestGetPlanes.


        :return: The type of this RequestGetPlanes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this RequestGetPlanes.


        :param type: The type of this RequestGetPlanes.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def stype(self) -> str:
        """Gets the stype of this RequestGetPlanes.


        :return: The stype of this RequestGetPlanes.
        :rtype: str
        """
        return self._stype

    @stype.setter
    def stype(self, stype: str):
        """Sets the stype of this RequestGetPlanes.


        :param stype: The stype of this RequestGetPlanes.
        :type stype: str
        """
        if stype is None:
            raise ValueError("Invalid value for `stype`, must not be `None`")  # noqa: E501

        self._stype = stype

    @property
    def servicio(self) -> str:
        """Gets the servicio of this RequestGetPlanes.


        :return: The servicio of this RequestGetPlanes.
        :rtype: str
        """
        return self._servicio

    @servicio.setter
    def servicio(self, servicio: str):
        """Sets the servicio of this RequestGetPlanes.


        :param servicio: The servicio of this RequestGetPlanes.
        :type servicio: str
        """

        self._servicio = servicio

    @property
    def tipo_servicio(self) -> str:
        """Gets the tipo_servicio of this RequestGetPlanes.


        :return: The tipo_servicio of this RequestGetPlanes.
        :rtype: str
        """
        return self._tipo_servicio

    @tipo_servicio.setter
    def tipo_servicio(self, tipo_servicio: str):
        """Sets the tipo_servicio of this RequestGetPlanes.


        :param tipo_servicio: The tipo_servicio of this RequestGetPlanes.
        :type tipo_servicio: str
        """

        self._tipo_servicio = tipo_servicio

    @property
    def external_transaction_id(self) -> str:
        """Gets the external_transaction_id of this RequestGetPlanes.


        :return: The external_transaction_id of this RequestGetPlanes.
        :rtype: str
        """
        return self._external_transaction_id

    @external_transaction_id.setter
    def external_transaction_id(self, external_transaction_id: str):
        """Sets the external_transaction_id of this RequestGetPlanes.


        :param external_transaction_id: The external_transaction_id of this RequestGetPlanes.
        :type external_transaction_id: str
        """
        if external_transaction_id is None:
            raise ValueError("Invalid value for `external_transaction_id`, must not be `None`")  # noqa: E501

        self._external_transaction_id = external_transaction_id
